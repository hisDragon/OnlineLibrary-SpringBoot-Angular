import { Component, OnInit } from '@angular/core';
import { IUser } from '../models/IUser';
import { UserService } from '../services/user.service';
import { User } from './user';

@Component({
  selector: 'app-login',
  templateUrl: './login.component.html',
  styleUrls: ['./login.component.css']
})
export class LoginComponent implements OnInit {
  public password_set :string="";
  public password_confirm :string="";
  userModel = new User('','');

  // injecting/autowiring service dependency
  constructor(private userService: UserService) { }

  ngOnInit(): void {
  }

  // BACKEND STUFF //

  // login button handler
  onLogin(): void {
    let mail = (document.getElementById('lemail') as HTMLInputElement).value;
    let pwd = (document.getElementById('lpassword') as HTMLInputElement).value;
    
    this.userService.getByEmail(mail).subscribe(
      user => {
        if(user && user.userPassword === pwd) {
          alert('welcome ' + user.userName);
        }
        else alert('Incorrect email/password');
      },
      error => console.log(error)
    );

  }

  // maintaining state for sending it back to server
  private registerState: IUser = {
    userId: 1,
    userName: null,
    userPhone: null,
    userAvatar: null,
    userEmail: null,
    userPassword: null
  };

  // register button handler
  onRegister(): void {
    this.registerState.userName = (document.getElementById('rfirstName') as HTMLInputElement).value + ' ' + (document.getElementById('rlastName') as HTMLInputElement).value;
    this.registerState.userPhone = (document.getElementById('rphone') as HTMLInputElement).value;
    this.registerState.userAvatar = 'default/path/to/avatar'; // default for later use
    this.registerState.userEmail = (document.getElementById('remail') as HTMLInputElement).value;
    this.registerState.userPassword = this.password_confirm;

    let ignoreList = [ 'userId' ]; // ignoring ID attribute because it is automatically generated by Spring data JPA
    function replacer(key, value){if (ignoreList.indexOf(key) > -1) return undefined;else return value;}
    let data = JSON.stringify(this.registerState, replacer);

    this.userService.postUsers(data).subscribe(user => console.log(user), error => console.log(error));
    alert('added ' + this.registerState.userName + ' to the database');
    
  }

  // BACKEND STUFF //

}
